"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const paragraph = require("../docx/paragraph/formatting");
const properties_1 = require("../docx/paragraph/properties");
const formatting = require("../docx/run/formatting");
const properties_2 = require("../docx/run/properties");
const xml_components_1 = require("../docx/xml-components");
class LevelAttributes extends xml_components_1.XmlAttributeComponent {
    constructor() {
        super(...arguments);
        this.xmlKeys = {
            ilvl: "w:ilvl",
            tentative: "w15:tentative",
        };
    }
}
class Start extends xml_components_1.XmlComponent {
    constructor(value) {
        super("w:start");
        this.root.push(new xml_components_1.Attributes({
            val: value,
        }));
    }
}
class NumberFormat extends xml_components_1.XmlComponent {
    constructor(value) {
        super("w:numFmt");
        this.root.push(new xml_components_1.Attributes({
            val: value,
        }));
    }
}
class LevelText extends xml_components_1.XmlComponent {
    constructor(value) {
        super("w:lvlText");
        this.root.push(new xml_components_1.Attributes({
            val: value,
        }));
    }
}
class LevelJc extends xml_components_1.XmlComponent {
    constructor(value) {
        super("w:lvlJc");
        this.root.push(new xml_components_1.Attributes({
            val: value,
        }));
    }
}
class LevelBase extends xml_components_1.XmlComponent {
    constructor(level, start, numberFormat, levelText, lvlJc) {
        super("w:lvl");
        this.root.push(new LevelAttributes({
            ilvl: level,
            tentative: 1,
        }));
        if (start !== undefined) {
            this.root.push(new Start(start));
        }
        if (numberFormat !== undefined) {
            this.root.push(new NumberFormat(numberFormat));
        }
        if (levelText !== undefined) {
            this.root.push(new LevelText(levelText));
        }
        if (lvlJc !== undefined) {
            this.root.push(new LevelJc(lvlJc));
        }
        this.paragraphProperties = new properties_1.ParagraphProperties();
        this.runProperties = new properties_2.RunProperties();
        this.root.push(this.paragraphProperties);
        this.root.push(this.runProperties);
    }
    addParagraphProperty(property) {
        this.paragraphProperties.push(property);
        return this;
    }
    addRunProperty(property) {
        this.runProperties.push(property);
        return this;
    }
    size(twips) {
        this.addRunProperty(new formatting.Size(twips));
        return this;
    }
    bold() {
        this.addRunProperty(new formatting.Bold());
        return this;
    }
    italics() {
        this.addRunProperty(new formatting.Italics());
        return this;
    }
    smallCaps() {
        this.addRunProperty(new formatting.SmallCaps());
        return this;
    }
    allCaps() {
        this.addRunProperty(new formatting.Caps());
        return this;
    }
    strike() {
        this.addRunProperty(new formatting.Strike());
        return this;
    }
    doubleStrike() {
        this.addRunProperty(new formatting.DoubleStrike());
        return this;
    }
    subScript() {
        this.addRunProperty(new formatting.SubScript());
        return this;
    }
    superScript() {
        this.addRunProperty(new formatting.SuperScript());
        return this;
    }
    underline(underlineType, color) {
        this.addRunProperty(new formatting.Underline(underlineType, color));
        return this;
    }
    color(color) {
        this.addRunProperty(new formatting.Color(color));
        return this;
    }
    font(fontName) {
        this.addRunProperty(new formatting.RunFonts(fontName));
        return this;
    }
    center() {
        this.addParagraphProperty(new paragraph.Alignment("center"));
        return this;
    }
    left() {
        this.addParagraphProperty(new paragraph.Alignment("left"));
        return this;
    }
    right() {
        this.addParagraphProperty(new paragraph.Alignment("right"));
        return this;
    }
    justified() {
        this.addParagraphProperty(new paragraph.Alignment("both"));
        return this;
    }
    thematicBreak() {
        this.addParagraphProperty(new paragraph.ThematicBreak());
        return this;
    }
    maxRightTabStop() {
        this.addParagraphProperty(new paragraph.MaxRightTabStop());
        return this;
    }
    leftTabStop(position) {
        this.addParagraphProperty(new paragraph.LeftTabStop(position));
        return this;
    }
    indent(left, hanging) {
        this.addParagraphProperty(new paragraph.Indent(left, hanging));
        return this;
    }
    spacing(params) {
        this.addParagraphProperty(new paragraph.Spacing(params));
        return this;
    }
    keepNext() {
        this.addParagraphProperty(new paragraph.KeepNext());
        return this;
    }
    keepLines() {
        this.addParagraphProperty(new paragraph.KeepLines());
        return this;
    }
}
exports.LevelBase = LevelBase;
class Level extends LevelBase {
    constructor(level, numberFormat, levelText, lvlJc) {
        super(level, 1, numberFormat, levelText, lvlJc);
    }
}
exports.Level = Level;
class LevelForOverride extends LevelBase {
}
exports.LevelForOverride = LevelForOverride;
//# sourceMappingURL=level.js.map